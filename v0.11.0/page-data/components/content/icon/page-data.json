{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/icon/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"d89aa7a9-1ca6-5acb-bc9f-37d65d3607cd","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Icon\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Icon />\"), \" component uses the property \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" to display the correct icon.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space around>\\n  <Icon name=\\\"Check\\\" />\\n  <Icon name=\\\"Favorite\\\" size=\\\"large\\\" />\\n  <Icon name=\\\"GearOutline\\\" size=\\\"small\\\" />\\n</Space>\\n\")), mdx(\"h2\", null, \"Icon Attributes\"), mdx(\"h3\", null, \"artwork\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"artwork\"), \" allows for external patterns that is not already available in our Icon list. You may only specify name OR artwork, not both.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space around>\\n  <Icon\\n    artwork={\\n      <svg viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <path\\n          d=\\\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z\\\"\\n          fill=\\\"#7FFFD4\\\"\\n        />\\n      </svg>\\n    }\\n    size=\\\"large\\\"\\n  />\\n  <Icon\\n    artwork={\\n      <svg\\n        width=\\\"24\\\"\\n        height=\\\"24\\\"\\n        viewBox=\\\"0 0 24 24\\\"\\n        fill=\\\"none\\\"\\n        xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      >\\n        <path\\n          d=\\\"M7 11H9V13H7V11ZM21 6V20C21 21.1 20.1 22 19 22H5C3.89 22 3 21.1 3 20L3.01 6C3.01 4.9 3.89 4 5 4H6V2H8V4H16V2H18V4H19C20.1 4 21 4.9 21 6ZM5 8H19V6H5V8ZM19 20V10H5V20H19ZM15 13H17V11H15V13ZM11 13H13V11H11V13Z\\\"\\n          fill=\\\"#FF7F50\\\"\\n        />\\n      </svg>\\n    }\\n  />\\n</Space>\\n\")), mdx(\"h3\", null, \"color\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" by default, icons inherit the text color of the component they are embedded within. But it can also have it specify as a prop.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space around>\\n  <Icon name=\\\"Trash\\\" color=\\\"inform\\\" />\\n  <Box\\n    color=\\\"critical\\\"\\n    bg=\\\"ui5\\\"\\n    p=\\\"large\\\"\\n    width=\\\"210px\\\"\\n    display=\\\"flex\\\"\\n    flexDirection=\\\"column\\\"\\n    borderRadius=\\\"medium\\\"\\n  >\\n    The text in this Box is red and so is the icon.\\n    <Icon name=\\\"Trash\\\" size=\\\"large\\\" mx=\\\"auto\\\" />\\n  </Box>\\n</Space>\\n\")), mdx(\"h3\", null, \"size\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" can be specified by using the size prop. By default the size will be medium.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Space around>\\n  <Icon name=\\\"Beaker\\\" color=\\\"inform\\\" size=\\\"xxsmall\\\" />\\n  <Icon name=\\\"Beaker\\\" color=\\\"inform\\\" size=\\\"xsmall\\\" />\\n  <Icon name=\\\"Beaker\\\" color=\\\"inform\\\" size=\\\"small\\\" />\\n  <Icon name=\\\"Beaker\\\" color=\\\"inform\\\" size=\\\"medium\\\" />\\n  <Icon name=\\\"Beaker\\\" color=\\\"inform\\\" size=\\\"large\\\" />\\n</Space>\\n\")), mdx(\"h3\", null, \"Accessibility\"), mdx(\"p\", null, \"When using an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Icon\"), \" we strongly encourage specification of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" attribute. If an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Icon\"), \" is used without an explicitly specified \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" attribute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-hidden=\\\"true\\\"\"), \" will be added to hide the icon from screen readers. The assumption will be made that other efforts have been made to give the user context.\"), mdx(\"h2\", null, \"Icon Library\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Tip:\"), \" you can click an icon below to copy it to your clipboard.\"), mdx(IconList, {\n    mdxType: \"IconList\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"Icon"}}},"pageContext":{"id":"d89aa7a9-1ca6-5acb-bc9f-37d65d3607cd"}},"staticQueryHashes":["1992130076","2337259409","4275213719","4275213719"]}